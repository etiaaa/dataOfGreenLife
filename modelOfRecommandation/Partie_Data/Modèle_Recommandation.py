# Mod√®le_Recommandation.py

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import joblib

# Fonction pour g√©n√©rer une recommandation globale selon le total CO‚ÇÇ
def recommandation_globale(score):
    if score < 50:
        return "üå± Tr√®s bien, continuez comme √ßa !"
    elif score < 100:
        return "‚öñÔ∏è Vous √™tes dans la moyenne, mais vous pouvez encore r√©duire vos √©missions."
    else:
        return "üö® Votre empreinte est √©lev√©e, il est temps de passer √† l‚Äôaction !"

# 1. Charger le dataset d'entra√Ænement
df = pd.read_csv("reco_training_dataset.csv")

# 2. D√©finir les colonnes d'entr√©e (features) et la colonne de sortie (target)
X = df[["equipements_kg_mois", "logement_total_kg_mois", "transport_kg_mois"]]
y = df["recommandation"]

# 3. Encoder les recommandations (texte ‚Üí entier)
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)

# 4. Diviser le dataset pour entra√Æner et tester le mod√®le
X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, random_state=42
)

# 5. Cr√©er et entra√Æner le mod√®le
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# 6. √âvaluer la pr√©cision du mod√®le (optionnel)
score = model.score(X_test, y_test)
print(f"‚úÖ Pr√©cision du mod√®le : {score:.2f}")

# 7. Tester une pr√©diction avec de nouvelles donn√©es
new_data = pd.DataFrame([
    {
        "equipements_kg_mois": 6.25,
        "logement_total_kg_mois": 56.25,
        "transport_kg_mois": 62.4
    },
    {
        "equipements_kg_mois": 3.0,
        "logement_total_kg_mois": 25.0,
        "transport_kg_mois": 15.0
    }
])

# 8. Calcul du score CO2 total
new_data["prediction_kgCO2_mois"] = new_data.sum(axis=1)

# 9. Pr√©diction sp√©cifique via ML
predictions = model.predict(new_data[["equipements_kg_mois", "logement_total_kg_mois", "transport_kg_mois"]])
reco_results = encoder.inverse_transform(predictions)

# 10. G√©n√©rer les recommandations globales
global_recos = new_data["prediction_kgCO2_mois"].apply(recommandation_globale)

# 11. Afficher les recommandations combin√©es
for i, (specific, global_msg) in enumerate(zip(reco_results, global_recos)):
    print(f"\nüîé Utilisateur {i+1} ‚Üí Recommandation sp√©cifique : {specific}")
    print(f"üí¨ Recommandation globale : {global_msg}")

# 12. Sauvegarder le mod√®le et l'encodeur
joblib.dump(model, "modele_recommandation.pkl")
joblib.dump(encoder, "label_encoder.pkl")
